plugins {
    id 'com.android.application'
}

android {
    compileSdk rootProject.ext.androidCompileSdkVersion

    defaultConfig {
        applicationId "com.cj.mobile.myarapplication"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi-v7a'
        }

        multiDexEnabled true // 启用多DEX支持
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    sourceSets.main.jni.srcDirs = []
    //禁止自带的ndk功能
    sourceSets.main.jniLibs.srcDirs = ['src/main/libs','src/main/jniLibs']

    task ndkBuild(type: Exec, description: 'Compile JNI source with NDK') {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = properties.getProperty('ndk.dir')

        if (ndkDir == null) {
            throw new GradleException("NDK 路径未配置，请检查 local.properties 或环境变量 ANDROID_NDK_HOME")
        }

        // 使用 System 属性判断操作系统
        def osName = System.getProperty("os.name").toLowerCase()
        if (osName.contains("windows")) {
            commandLine "$ndkDir/ndk-build.cmd", '-C', file('src/main/jni').absolutePath
        } else {
            commandLine "$ndkDir/ndk-build", '-C', file('src/main/jni').absolutePath
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task ndkClean(type: Exec, description: 'Clean NDK Binaries') {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = properties.getProperty('ndk.dir')

        if (ndkDir == null) {
            throw new GradleException("NDK 路径未配置，请检查 local.properties 或环境变量 ANDROID_NDK_HOME")
        }

        // 使用 System 属性判断操作系统
        def osName = System.getProperty("os.name").toLowerCase()
        if (osName.contains("windows")) {
            commandLine "$ndkDir/ndk-build.cmd",'clean', '-C', file('src/main/jni').absolutePath
        } else {
            commandLine "$ndkDir/ndk-build",'clean', '-C', file('src/main/jni').absolutePath
        }
    }

    clean.dependsOn 'ndkClean'

    // 启用视图绑定/数据绑定（可选）
    buildFeatures {
        viewBinding true
    }

    //打包忽略掉第三方jar相同的文件(为了解决部分第三方库重复打包了META-INF的问题)
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    // 这个是解决lint报错的代码(lint工具可以通过一个xml文件来配置，它可以用来修改某些check issue是否忽略(典型的例子是第三方库里面存在问题)，同时可以修改某些issue的默认等级。)
    lintOptions {
        lintConfig file('lint.xml')

        disable 'InvalidPackage'
        disable "ResourceType"

        //如果发现错误，lint工具是否应该退出这个程序(这样在我们构建项目的时候如果发生错误，将直接中断构建)。true表示退出。
        abortOnError false

        //true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])

    // AndroidX核心库
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.alibaba:fastjson:1.2.21'

    // 权限注解
    implementation "com.github.permissions-dispatcher:permissionsdispatcher:4.9.2"
    annotationProcessor "com.github.permissions-dispatcher:permissionsdispatcher-processor:4.9.2"

    // CameraX 核心库
//    implementation "androidx.camera:camera-core:1.2.3"
//    implementation "androidx.camera:camera-camera2:1.2.3"
//    implementation "androidx.camera:camera-lifecycle:1.2.3"
//    implementation "androidx.camera:camera-view:1.2.3"

    // 轻量3D渲染
    implementation 'org.rajawali3d:rajawali:1.2.1970'
    // dlib
    implementation project(':dlib')
}